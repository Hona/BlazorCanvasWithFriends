@page "/"
@rendermode InteractiveWebAssembly

@inject CanvasClient CanvasClient
@inject IJSRuntime JsRuntime

@layout CanvasLayout

<PageTitle>
    Canvas
</PageTitle>

<Canvas @ref="helper_canvas" 
        id="@CanvasId"
        width="@(_canvasWidth + "px")" 
        height="@(_canvasHeight + "px")" 
        style="width: 100%; height: 100%; touch-action: none;"
        @onmousedown="HandleMouseDown" 
        @onmousemove="HandleMouseMove"
        @onmouseup="HandleMouseUp"
        @ontouchstart="HandleTouchStart"
        @ontouchmove="HandleTouchMove"
        @ontouchend="HandleTouchEnd"/>

@code {
    
    private int _canvasWidth = 800;
    private int _canvasHeight = 600;
    private const string CanvasId = "canvaswithfriends";

    protected override async Task OnInitializedAsync()
    {
        CanvasClient.OnDrawLine = EventCallback.Factory.Create<Line>(
            this, HandleDrawLine);

        CanvasClient.OnClear = EventCallback.Factory.Create(
            this, Clear);
        
        await CanvasClient.InitializeAsync();
        
        await base.OnInitializedAsync();
    }

    // Canvas
    private Point2D? _from;
    private Point2D? _to;

    private record CanvasBounds(double Left, double Top, double Width, double Height);
    private record BrowserScroll(double X, double Y);

    private async Task<Point2D> GetPosition(double clientX, double clientY)
    {
        var element = await JsRuntime.InvokeAsync<IJSObjectReference>("document.getElementById", CanvasId);
        var rect = await element.InvokeAsync<CanvasBounds>("getBoundingClientRect");

        var x = clientX - rect.Left;
        var y = clientY - rect.Top;

        var scaleX = _canvasWidth / rect.Width;
        var scaleY = _canvasHeight / rect.Height;

        x *= scaleX;
        y *= scaleY;

        return new Point2D((int)x, (int)y);
    }

    // Mouse
    private async Task HandleMouseDown(MouseEventArgs e) => _from = await GetPosition(e.ClientX, e.ClientY);
    private async Task HandleMouseMove(MouseEventArgs e) => await ProcessDrawing(e.ClientX, e.ClientY);
    private async Task HandleMouseUp(MouseEventArgs e) => await EndDrawing(e.ClientX, e.ClientY);

    // Mobile - touch
    private async Task HandleTouchStart(TouchEventArgs e) => _from = await GetPosition(e.Touches[0].ClientX, e.Touches[0].ClientY);
    private async Task HandleTouchMove(TouchEventArgs e) => await ProcessDrawing(e.Touches[0].ClientX, e.Touches[0].ClientY);
    private async Task HandleTouchEnd(TouchEventArgs e) => await EndDrawing(e.ChangedTouches[0].ClientX, e.ChangedTouches[0].ClientY);

    
    private async Task ProcessDrawing(double clientX, double clientY)
    {
        if (_from is null) return;

        var now = DateTime.Now;
        if ((now - _lastUpdateSent) < _throttleDuration) return;

        _to = await GetPosition(clientX, clientY);

        if (_to is not null)
        {
            await CanvasClient.Hub?.DrawLine(new Line(_from, _to));
            _from = _to;
            _lastUpdateSent = now;
        }
    }

    private async Task EndDrawing(double clientX, double clientY)
    {
        if (_from is null) return;

        _to = await GetPosition(clientX, clientY);

        if (_to is not null)
        {
            await CanvasClient.Hub?.DrawLine(new Line(_from, _to));
            _from = null;
            _to = null;
        }
    }

    
    private DateTime _lastUpdateSent = DateTime.MinValue;

    private const double TicksPerSecond = 64;

    private TimeSpan _throttleDuration = TimeSpan.FromMilliseconds(1000 / TicksPerSecond);
    
    private Canvas helper_canvas;
    protected override async Task OnAfterRenderAsync(bool first_render)
    {
        if (first_render)
        {
            Clear();

            await CanvasClient.Hub?.RequestState();
        }
    }

    private async Task HandleDrawLine(Line line)
    {
        Console.WriteLine("DrawLine {0}", line);
        
        await using var ctx = await helper_canvas.GetContext2DAsync();
        await ctx.StrokeStyleAsync("#fff");
        await ctx.BeginPathAsync();
        await ctx.MoveToAsync(line.From.X, line.From.Y);
        await ctx.LineToAsync(line.To.X, line.To.Y);
        await ctx.StrokeAsync();
    }
    
    private async Task Clear()
    {
        await using var ctx1 = await helper_canvas.GetContext2DAsync();
        
        // Black background
        await ctx1.FillStyleAsync("#000");
        await ctx1.FillRectAsync(0, 0, _canvasWidth, _canvasHeight);
    }
}